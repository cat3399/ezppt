name: Docker Publish

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

env:
  IMAGE_NAME: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ezppt

jobs:
  build:
    name: Build ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image (${{ matrix.arch }})
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

      - name: Write image reference
        run: echo "${IMAGE_NAME}@${{ steps.build.outputs.digest }}" > refs-${{ matrix.arch }}.txt

      - name: Upload image digest
        uses: actions/upload-artifact@v4
        with:
          name: refs-${{ matrix.arch }}
          path: refs-${{ matrix.arch }}.txt

  manifest:
    name: Publish manifest
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download image digests
        uses: actions/download-artifact@v4
        with:
          pattern: refs-*
          merge-multiple: true
          path: .

      - name: Create and push multi-arch manifest
        shell: bash
        run: |
          set -euo pipefail

          # Detect new per-arch digests from this run
          has_new_amd=false
          has_new_arm=false
          [[ -f refs-amd64.txt ]] && has_new_amd=true
          [[ -f refs-arm64.txt ]] && has_new_arm=true

          new_amd_ref=""
          new_arm_ref=""
          if [ "$has_new_amd" = true ]; then new_amd_ref="$(cat refs-amd64.txt)"; fi
          if [ "$has_new_arm" = true ]; then new_arm_ref="$(cat refs-arm64.txt)"; fi

          # Read existing latest manifest to inherit missing arches
          old_amd_ref=""
          old_arm_ref=""
          if docker buildx imagetools inspect "${IMAGE_NAME}:latest" >/dev/null 2>&1; then
            # Parse verbose output to map platform -> digest reference
            name=""
            while IFS= read -r line; do
              case "$line" in
                *Name:*)
                  set +u
                  name=$(echo "$line" | awk '{print $2}')
                  set -u
                  ;;
                *Platform:*)
                  plat=$(echo "$line" | awk '{print $2}')
                  if [ "$plat" = "linux/amd64" ]; then
                    old_amd_ref="$name"
                  elif [ "$plat" = "linux/arm64" ]; then
                    old_arm_ref="$name"
                  fi
                  ;;
              esac
            done < <(docker buildx imagetools inspect -v "${IMAGE_NAME}:latest")
          fi

          # Prefer new digest if available; otherwise fall back to previous latest
          amd_ref=${new_amd_ref:-$old_amd_ref}
          arm_ref=${new_arm_ref:-$old_arm_ref}

          digests=()
          if [ -n "$amd_ref" ]; then digests+=("$amd_ref"); fi
          if [ -n "$arm_ref" ]; then digests+=("$arm_ref"); fi

          if [ "${#digests[@]}" -eq 0 ]; then
            echo "No digests found to publish (no new and no previous)." >&2
            exit 1
          fi

          echo "Publishing ${IMAGE_NAME}:latest with the following references:"
          printf ' - %s\n' "${digests[@]}"
          docker buildx imagetools create -t "${IMAGE_NAME}:latest" "${digests[@]}"
      - name: Inspect manifest
        run: docker buildx imagetools inspect ${IMAGE_NAME}:latest
